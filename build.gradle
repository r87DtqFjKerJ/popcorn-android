// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'
        classpath 'com.jakewharton.hugo:hugo-plugin:1.2.1'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.7'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

ext {
    appCompatVersion = "22.0.0"
    buildToolsVersion = "22.0.1"
    targetSdk = 22
    compileSdk = 22
    minSdk = 21
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
    }
    //let project evaluate its script first
    project.afterEvaluate {
        //only apply to projects that have the android plugin
        if (project.plugins.hasPlugin('com.android.application')) {

            project.android.applicationVariants.all { variant ->
                //add a generated crashlytics properties file if the project applies the crashlytics plugin
                if (project.plugins.hasPlugin("io.fabric")) {
                    createCrashlyticsProperties(project, variant)
                }

                //rename output files
                renameOutputFiles(project, variant)
            }

        }
    }
}


def createCrashlyticsProperties(Project project, variant) {
    def crashlyticsSecret = System.getenv("CRASHLYTICS_API_SECRET") ?: "aca1e95d3653c0a18d3c1c417f0455ebc16513a3eae385948c64153ef22a1beb"
    // Valid keys of non-existing organization on Crashlytics to make local building possible
    def crashlyticsKey = System.getenv("CRASHLYTICS_API_KEY") ?: "b246d46ecb3f6b64f3ce24c0c2055cc4fd101c93"
    // Valid keys of non-existing organization on Crashlytics to make local building possible

    File crashlyticsProperties = new File("${project.projectDir.absolutePath}/crashlytics.properties")
    def variantSuffix = variant.name.capitalize()
    def generateResourcesTask = project.tasks.getByName("crashlyticsGenerateResources${variantSuffix}")
    def generatePropertiesTask = task("crashlyticsGenerateProperties${variantSuffix}") << {
        Properties properties = new Properties()
        println "...copying apiSecret for ${variant.name}"
        properties.put("apiSecret", crashlyticsSecret)
        println "...copying apiKey for ${variant.name}"
        properties.put("apiKey", crashlyticsKey)
        properties.store(new FileWriter(crashlyticsProperties), "")
    }
    generateResourcesTask.dependsOn generatePropertiesTask
    def assembleTask = project.tasks.getByName("assemble${variantSuffix}")
    assembleTask.doLast {
        println "...removing crashlytics.properties"
        crashlyticsProperties.delete()
    }
}

def renameOutputFiles(Project project, variant) {
    variant.outputs.each { output ->
        def abi = output.getFilter(com.android.build.OutputFile.ABI);
        output.versionCodeOverride = project.ext.versionCodes.get(abi, 0) * 1000000 + output.versionCode

        def alignedOutputFile = output.outputFile
        def unalignedOutputFile = output.packageApplication.outputFile
        def outputFileName = alignedOutputFile.name

        // Customise APK filenames
        if (outputFileName.contains("debug")) {
            outputFileName = outputFileName.replace("debug", "development").replace(".apk", "-" + (System.getenv("BUILD_NUMBER") ?: "local") + ".apk")
        } else {
            outputFileName = outputFileName.replace(".apk", "-" + variant.versionName + ".apk")
        }

        if (variant.buildType.zipAlignEnabled) {
            // normal APK
            output.outputFile = new File(alignedOutputFile.parent, outputFileName)
        }
        // 'unaligned' APK
        output.packageApplication.outputFile = new File(unalignedOutputFile.parent, outputFileName.replace(".apk", "-unaligned.apk"))
    }
}
